@Transactional 可以作用在接口、类、类方法:
    1.作用于类：当把@Transactional 注解放在类上时，表示所有该类的public方法都配置相同的事务属性信息。
    2.作用于方法：当类配置了@Transactional，方法也配置了@Transactional，方法的事务会覆盖类的事务配置信息。
    3.作用于接口：不推荐这种使用方法，因为一旦标注在Interface上并且配置了Spring AOP 使用CGLib动态代理，将会导致@Transactional注解失效(接口上的@Transactional注解是“不能继承的”)
    4.如果在接口、实现类或方法上都指定了@Transactional 注解，则优先级顺序为:方法>实现类>接口；
@Transactional注解有哪些属性:
    1.propagation 代表事务的传播行为，默认值为 Propagation.REQUIRED，其他的属性信息如下：
            Propagation.REQUIRED：如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。
                ( 也就是说如果A方法和B方法都添加了注解，在默认传播模式下，A方法内部调用B方法，会把两个方法的事务合并为一个事务 ）
            Propagation.SUPPORTS：如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。
            Propagation.MANDATORY：如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。
            Propagation.REQUIRES_NEW：重新创建一个新的事务，如果当前存在事务，暂停当前的事务。
                ( 当类A中的 a 方法用默认Propagation.REQUIRED模式，类B中的 b方法加上采用 Propagation.REQUIRES_NEW模式，然后在 a 方法中调用 b方法操作数据库，然而 a方法抛出异常后，b方法并没有进行回滚，因为Propagation.REQUIRES_NEW会暂停 a方法的事务 )
            Propagation.NOT_SUPPORTED：以非事务的方式运行，如果当前存在事务，暂停当前的事务。
            Propagation.NEVER：以非事务的方式运行，如果当前存在事务，则抛出异常。
            Propagation.NESTED ：和 Propagation.REQUIRED 效果一样。
    2.isolation 属性
            isolation ：事务的隔离级别，默认值为 Isolation.DEFAULT。
            TransactionDefinition.ISOLATION_DEFAULT: 使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.
            TransactionDefinition.ISOLATION_READ_UNCOMMITTED: 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读
            TransactionDefinition.ISOLATION_READ_COMMITTED: 允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生
            TransactionDefinition.ISOLATION_REPEATABLE_READ: 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。
            TransactionDefinition.ISOLATION_SERIALIZABLE: 最高的隔离级别，完全服从ACID的隔离级别。
                所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。
    3.timeout 属性:事务的超时时间，默认值为 -1。如果超过该时间限制但事务还没有完成，则自动回滚事务。
    4.readOnly 属性:指定事务是否为只读事务，默认值为 false；为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 true。
    5.rollbackFor属性:用于指定能够触发事务回滚的异常类型，可以指定多个异常类型。
    6.noRollbackFor属性:抛出指定的异常类型，不回滚事务，也可以指定多个异常类型。
@Transactional失效场景:
    1、如果Transactional注解应用在非public 修饰的方法上，Transactional将会失效。
        之所以会失效是因为在Spring AOP 代理时，TransactionInterceptor （事务拦截器）在目标方法执行前后进行拦截，
        DynamicAdvisedInterceptor（CglibAopProxy 的内部类）的 intercept 方法或 JdkDynamicAopProxy 的 invoke 方法会间接调用 AbstractFallbackTransactionAttributeSource的
        computeTransactionAttribute 方法，获取Transactional 注解的事务配置信息。computeTransactionAttribute源码如下:
            protected TransactionAttribute computeTransactionAttribute(Method method,
                Class<?> targetClass) {
                    // Don't allow no-public methods as required.
                    if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {
                    returnnull;
            }
            此方法会检查目标方法的修饰符是否为 public，不是 public则不会获取@Transactional 的属性配置信息。
    2、@Transactional 注解属性 propagation 设置错误,若是错误的配置以下三种 propagation，事务将不会发生回滚:
        TransactionDefinition.PROPAGATION_SUPPORTS：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。
        TransactionDefinition.PROPAGATION_NOT_SUPPORTED：以非事务方式运行，如果当前存在事务，则把当前事务挂起。
        TransactionDefinition.PROPAGATION_NEVER：以非事务方式运行，如果当前存在事务，则抛出异常。
    3、@Transactional  注解属性 rollbackFor 设置错误,rollbackFor 可以指定能够触发事务回滚的异常类型。Spring默认抛出了未检查unchecked异常（继承自 RuntimeException 的异常）或者 Error才回滚事务；
        其他异常不会触发回滚事务。如果在事务中抛出其他类型的异常，但却期望 Spring 能够回滚事务，就需要指定 rollbackFor属性。
    4、同一个类中方法调用，导致@Transactional失效,比如有一个类Test，它的一个方法A，A再调用本类的方法B（不论方法B是用public还是private修饰），但方法A没有声明注解事务，而B方法有。
        则外部调用方法A之后，方法B的事务是不会起作用的。那为啥会出现这种情况？其实这还是由于使用Spring AOP代理造成的，因为只有当事务方法被当前类以外的代码调用时，才会由Spring生成的代理对象来管理。
    5、异常被你的 catch“吃了”导致@Transactional失效
        @Transactional
        //如果B方法内部抛了异常，而A方法此时try catch了B方法的异常，那这个事务还能正常回滚吗,不能回滚
        private Integer A() throws Exception {
            try {
                /**
                 * A 插入字段为 2的数据
                 */
                insert = cityInfoDictMapper.insert(cityInfoDict);
                /**
                 * B 插入字段为 3的数据
                 */
                b.insertB();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        因为当ServiceB中抛出了一个异常以后，ServiceB标识当前事务需要rollback。但是ServiceA中由于你手动的捕获这个异常并进行处理，ServiceA认为当前事务应该正常commit。
            此时就出现了前后不一致，也就是因为这样，抛出了前面的UnexpectedRollbackException异常。
        spring的事务是在调用业务方法之前开始的，业务方法执行完毕之后才执行commit or rollback，事务是否执行取决于是否抛出runtime异常。
            如果抛出runtime exception 并在你的业务方法中没有catch到的话，事务会回滚。
        在业务方法中一般不需要catch异常，如果非要catch一定要抛出throw new RuntimeException()，或者注解中指定抛异常类型@Transactional(rollbackFor=Exception.class)，否则会导致事务失效
            ，数据commit造成数据不一致，所以有些时候 try catch反倒会画蛇添足。
    6、数据库引擎不支持事务
    7、新开启一个线程,一个方法内存开启多个线程执行任务时事务会失效，因为spring实现事务的原理是通过ThreadLocal把数据库连接绑定到当前线程中，新开启一个线程获取到的连接就不是同一个了。
    8、通过this调用方法,由于this这个关键字在jvm中指当前类对象，而不是spring代理后的代理对象，所以不具备事务增强能力。
        public void methodA(){this.methodB  //methodB方法如果抛出异常，事务不会回滚  }
        @Transactional
        public void methodB(){....}


示例:
   //让Exception异常也进行回滚操作，在调用该方法前加上:
   @Transactional(rollbackFor = Exception.class)

   //让RuntimeException不进行回滚操作，在调用该方法前加上:
   @Transactional(noRollbackFor=RunTimeException.class)

   //只读事务，可以提高效率:
   @Transactional(propagation=Propagation.NOT_SUPPORTED,readOnly=true)

   //如果有事务，那么加入事务，没有的话新创建一个
   @Transactional(propagation=Propagation.REQUIRED)

   //这个方法不开启事务
   @Transactional(propagation=Propagation.NOT_SUPPORTED)

   //不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕，继续执行老的事务
   @Transactional(propagation=Propagation.REQUIREDS_NEW)

   //必须在一个已有的事务中执行，否则抛出异常
   @Transactional(propagation=Propagation.MANDATORY)

   //不能在一个事务中执行，就是当前必须没有事务，否则抛出异常
   @Transactional(propagation=Propagation.NEVER)

   //其他bean调用这个方法，如果在其他bean中声明了事务，就是用事务。没有声明，就不用事务。
   @Transactional(propagation=Propagation.SUPPORTS)

   //如果一个活动的事务存在，则运行在一个嵌套的事务中，如果没有活动的事务，则按照REQUIRED属性执行，它使用一个单独的事务。这个书屋拥有多个回滚的保存点，内部事务的回滚不会对外部事务造成影响，它只对DataSource TransactionManager事务管理器起效。
   @Transactional(propagation=Propagation.NESTED)

   //只读，不能更新，删除
   @Transactional(propagation=Propagation.REQUIRED,readOnly=true)

   //超时30秒
   @Transactional(propagation=Propagation.REQUIRED,timeout=30)

   //数据库隔离级别
   @Transactional(propagation=Propagation.REQUIRED,isolation=Isolation.DEFAULT)


















