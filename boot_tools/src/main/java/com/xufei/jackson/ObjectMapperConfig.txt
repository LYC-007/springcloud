序列化于反序列化:
        1.ObjectMapper 通过 writeValue 系列方法将 java 对象序列化为 json，
            并将 json 存储成不同的格式，String(writeValueAsString)，Byte Array(writeValueAsString)，Writer， File，OutStream 和 DataOutput。
        2.ObjectMapper 通过 readValue 系列方法从不同的数据源像 String ， Byte Array， Reader，File，URL， InputStream 将 json 反序列化为 java 对象。

在调用 writeValue 或调用 readValue 方法之前，往往需要设置 ObjectMapper 的相关配置信息。这些配置信息应用 java 对象的所有属性上。示例如下：
        1.在反序列化时忽略在 json 中存在但 Java 对象不存在的属性
            mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        2.Jackson对时间(Date)序列化的转换格式默认是时间戳,可以取消时间的默认时间戳转化格式；默认时间戳转化格式取消后在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ，同时需要设置要展现的时间格式。
            在序列化时日期格式默认为 yyyy-MM-dd'T'HH:mm:ss.SSSZ     "2020-11-20T05:12:22.868+0000"
            mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        3.在Data类型的数据被序列化时自定义时间日期格式
            mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
        4.在序列化时忽略值为 null 的属性
            mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        5.在序列化时忽略值为默认值的属性
            mapper.setDefaultPropertyInclusion(JsonInclude.Include.NON_DEFAULT);
        6.关闭空对象不让序列化(默认true,如果对象为空将报异常)
            mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        7.当反序列化的JSON串里带有反斜杠("\")时，默认objectMapper反序列化会失败，抛出异常Unrecognized character escape。可以通过Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER来设置当反斜杠存在时，能被objectMapper反序列化。
            mapper.configure(Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, true);
        8.当json字符串里带注释符时，默认情况下解析器不能解析。Feature.ALLOW_COMMENTS特性决定解析器是否允许解析使用Java/C++ 样式的注释（包括'/'+'*' 和'//' 变量）
            mapper.configure(Feature.ALLOW_COMMENTS, true); 默认是false，不能解析带注释的JSON串;如果为false,JSON里的注释符会被过滤掉
                1).如下反序列化JSON串里带'/'+'*' ，默认情况下objectMapper不能反序列化解析成对象，需要设置ALLOW_COMMENTS。
                    String json  = "{"
                            +"\"age\"" + ":" + 10 +
                            "/*" + "," +
                            "\"name\"" + ":" + "\"曹操\"*/" +
                        "}";
            	2).如下反序列化JSON串里带注释，默认情况下objectMapper不能反序列化解析成对象，需要设置ALLOW_COMMENTS。
                        {
                            "age": 10
                            //,
                            //"name": "曹操"
                        }
        9.Json字符串里数字类型值为正无穷、负无穷或NaN时，默认反序列化会失败,需要开启Feature.ALLOW_NON_NUMERIC_NUMBERS
            String json = "{\"age\":NaN, \"name\":\"曹操\"}";
            mapper.configure(Feature.ALLOW_NON_NUMERIC_NUMBERS, true);
        10.默认情况下objectMapper解析器是不能解析以"0"为开头的数字，需要开启Feature.ALLOW_NUMERIC_LEADING_ZEROS才能使用。
            String json = "{\"age\":0012, \"name\":\"曹操\"}";
            mapper.configure(Feature.ALLOW_NUMERIC_LEADING_ZEROS, true);
        11.Json反序列化可以解析单引号包住的属性名称和字符串值,parser解析器默认情况下不能识别单引号包住的属性和属性值，默认下该属性也是关闭的。
            mapper.configure(Feature.ALLOW_SINGLE_QUOTES, true);  如果Feature.ALLOW_SINGLE_QUOTES设置为false时，解析器会解析失败
            String json = "{'age':12, 'name':'曹操'}";
        12.反序列Json字符串中包含制控制字符Feature.ALLOW_UNQUOTED_CONTROL_CHARS该特性决定parser是否允许JSON字符串包含非引号控制字符（值小于32的ASCII字符，包含制表符\t、换行符\n和回车\r）。
            String json = "{'age':12, 'name':'曹操\n'}";
            mapper.configure(Feature.ALLOW_UNQUOTED_CONTROL_CHARS, true);如果该属性关闭，则如果遇到这些字符，则会抛出异常。
        13.默认情况下，标准的json串里属性名字都需要用双引号引起来。
            比如：{age:12, name:"曹操"}非标准的json串，解析器默认不能解析，需要设置Feature.ALLOW_UNQUOTED_FIELD_NAMES属性来处理这种没有双引号的json串
            mapper.configure(Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
            String json = "{age:12, name:'曹操'}";
        更多配置信息可以查看 Jackson 的 DeserializationFeature，SerializationFeature 和 Include。