server:
  port: 8082

spring:
  shardingsphere:
    ## 数据源配置
    datasource:
      names: master,slave1,slave2
      # 主数据源
      master:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.236.133:3307/mysql_demo?userUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&useSSL=false
        username: root
        password: root
        minimum-idle: 10
        maximum-pool-size: 30
        idle-timeout: 600000
        max-lifetime: 1800000
        connection-timeout: 30000
        connection-test-query: SELECT 1
      # 读数据源
      slave1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.236.133:3317/mysql_demo?userUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&useSSL=false
        username: root
        password: root
        minimum-idle: 10
        maximum-pool-size: 30
        idle-timeout: 600000
        max-lifetime: 1800000
        connection-timeout: 30000
        connection-test-query: SELECT 1
      slave2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://192.168.236.133:3327/mysql_demo?userUnicode=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8&useSSL=false
        username: root
        password: root
        minimum-idle: 10
        maximum-pool-size: 30
        idle-timeout: 600000
        max-lifetime: 1800000
        connection-timeout: 30000
        connection-test-query: SELECT 1
    ##读写分离配置
    rules:
      readwrite-splitting:
        data-sources:
          ## 读写分离名称
          mydatasource:
            type: Static
            ## 写数据源名称
            props:
              write-data-source-name: master
              ## 读数据源名称,多个使用","分开
              read-data-source-names: slave1,slave2
              ## 负载均衡算法名称  想要那种就输入下面的 名称
            load-balancer-name: weight-alg
        load-balancers:
          # 轮询
          # 负载均衡算法名称  com.xufei.rw.loadbalance.RoundRobinReplicaLoadBalanceAlgorithm
          round-alg:
            type: ROUND_ROBIN
          # 随机
          random-alg:
            type: RANDOM
          # 权重，我们在配置权重的时候必须配置各个 slave 的权重值，值的数据类型为 double
          weight-alg:
            type: WEIGHT
            props:
              slave1: 1.0
              slave2: 2.0
      sharding: # 分片配置
        tables:
          tb_order: # 逻辑表名称  @TableName("tb_order")
            actual-data-nodes: mydatasource.tb_order_$->{[0,1,2]} # 由数据源名 + 真实的表名组成（参考 Inline 语法规则）
            key-generate-strategy: # 主键生成策略
              column: id # 分布式序列列名称
              key-generator-name: snow # 分布式序列算法名称
            table-strategy: # 分表策略
              standard:
                sharding-column: id
                sharding-algorithm-name: table-inline-mod
          key-generators: # 分布式序列策略配置
            snow:
              type: SNOWFLAKE
        #分片算法
        sharding-algorithms:
          #************************时间范围分片算法***************************
          #一种时间范围的分片，跟自动时间段不同的是，分片的后缀是可以有意义的，比如：t_order_2021_01   t_order_2021_02   可以是以时间为后缀的
          table-inline:
            type: INTERVAL
            props:
              datetime-pattern: yyyy-MM-dd HH:mm:ss
              datetime-lower: 2021-01-01 00:00:00
              datetime-upper: 2026-01-01 00:00:00
              sharding-suffix-pattern: yyyy_MM
              datetime-interval-amount: 1
              datetime-interval-unit: MONTHS
              #注意：如果时间范围超过 配置的上限和下限将无法分片,可能会报错
          #************************标准分片算法***************************
          #基于goovy 表达式的inline 配置语句
          t-order-inline:
            type: INLINE
            props:
              algorithm-expression: tb_order_$->{id % 3}
              allow-range-query-with-inline-sharding: true  #inline 不支持范围查询，如果需要范围查询需要配置 allow-range-query-with-inline-sharding:true,走全表扫描的范围查询;
          # ***********************自动分片算法***************************************
          table-inline-mod:
            type: MOD  #取模分片算法:通过数据取模来分片,只需要指定分片算法类型和分片的数量，就会自动根据分片键的数据 % 分片的数量 完成分片
            props:
              sharding-count: 3  # 表示有4个分片表数量
          table-inline-hash:
            type: HASH_MOD  #哈希取模分片算法:就是在取模算法的基础上加了一层 hash运算 然后再取模；主要的特点是 可以针对非数值类型字段作为分片键;如果分片键不是数值类型是不能取模的;这里假设order 表增加一个字符串的类型字段;
            props:
              sharding-count: !!str 4 #这里加!!str不加解析的时候会有问题，这里必须指定字符串， 注意:sharding-count 后面的值需要强制指定为字符串 不然会报错,应该是有问题的;
          table-inline-volume-range:
            type: VOLUME_RANGE  #基于分片容量的范围分片算法:根据数据的容量进行拆分;比如一个需求一个表中最多只让存10条数据，就可以使用这个分片算法，严格的控制每个表的容量;
            props:
              sharding-volume: !!str 20   # 表示一个表中最多20个数据
              range-lower: !!str 10
              range-upper: !!str 50
              # 比如上面的配置 下限是1 上限是30 分割是10，那么在初始化的时候，会分为几个区间段；
              #(-∞,1),[1,10],[11,20],[30,+∞) ,对应表的后缀分别根据索引从0 开始分别是 table_0 table_1 table_2 table_3 ;
              #那么插入的数据根据数据的范围来确定落到那个表中；查询的时候也会根据分片条件来查询对应的表;
              #可以看到 order_id 为 0 的独自落到一个表中，接下来的表中数据都为10个，超过就下一个表中，而超过容量的数据都落到最后一个表中;
          table-alg:  #
            type: BOUNDARY_RANGE  #基于分片边界的范围分片算法:和基于容量的分界的算法类似，都是为了能够切分成几个区间；适合区间不太多的场景；
            props:
              sharding-ranges: 20,40,50 #long 类型的可用逗号分割的字符串
              #  #(-∞,20),[20,40),[40,50),[50,+∞)
          #自动时间段分片算法
          table-auto-data: #
            type: AUTO_INTERVAL  #此类型针对时间字段类型作为分片键进行查询;可根据固定的时间段，比如天，月，年进行分表
            props:
              datetime-lower: 2022-01-01 00:00:00       #开始的最小时间
              datetime-upper: 2022-01-02 00:00:00      #分片结束的时间
              sharding-seconds: !!str 86400            #每给分片的时间间隔
              #这样的分片结果会分成 (-∞,lower],(2022-01-01 00:00:00,2022-01-02 00:00:00]..... (upper,+∞)
              #可能会报parseDate 的解析时间字符串的错误;解决 办法改写字段的Getter方法: return  DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").format(orderTime);
    props:
      sql-show: true # 打印sql
      sql-comment-parse-enabled: true
